apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "rabbitmq.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "rabbitmq.name" . }}
    chart: {{ template "rabbitmq.chart" .  }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    {{- if .Values.podLabels }}
    {{- toYaml .Values.podLabels | nindent 4 }}
    {{- end }}
spec:
  serviceName: {{ template "rabbitmq.fullname" . }}-headless
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ .Values.replicas }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
    {{- if (eq "Recreate" .Values.updateStrategy.type) }}
    rollingUpdate: null
    {{- end }}
  selector:
    matchLabels:
      app: {{ template "rabbitmq.name" . }}
      release: "{{ .Release.Name }}"
  template:
    metadata:
      labels:
        app: {{ template "rabbitmq.name" . }}
        release: "{{ .Release.Name }}"
        chart: {{ template "rabbitmq.chart" .  }}
      {{- if .Values.podLabels }}
      {{- toYaml .Values.podLabels | nindent 8 }}
      {{- end }}
      annotations:
        {{- if or (not .Values.rabbitmq.existingErlangSecret) (not .Values.rabbitmq.existingPasswordSecret) }}
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- end }}
        {{- if or .Values.podAnnotations .Values.metrics.enabled }}
        {{- include "rabbitmq.podAnnotations" . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
      {{- end }}
{{- include "rabbitmq.imagePullSecrets" . | indent 6 }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ template "rabbitmq.serviceAccountName" . }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "rabbitmq.tplValue" (dict "value" .Values.affinity "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 10
      {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled .Values.securityContext.enabled }}
      initContainers:
        - name: volume-permissions
          image: "{{ template "rabbitmq.volumePermissions.image" . }}"
          imagePullPolicy: {{ default "" .Values.volumePermissions.image.pullPolicy | quote }}
          command: ["/bin/chown", "-R", "{{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.fsGroup }}", "{{ .Values.persistence.path }}"]
          securityContext:
            runAsUser: 0
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | indent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: "{{ .Values.persistence.path }}"
      {{- end }}
      containers:
        - name: rabbitmq
          image: {{ template "rabbitmq.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command:
            - bash
            - -ec
            - |
               mkdir -p /opt/bitnami/rabbitmq/.rabbitmq/
               mkdir -p /opt/bitnami/rabbitmq/etc/rabbitmq/
               touch /opt/bitnami/rabbitmq/var/lib/rabbitmq/.start
               #persist the erlang cookie in both places for server and cli tools
               echo $RABBITMQ_ERL_COOKIE > /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
               cp /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/.rabbitmq/
               #change permission so only the user has access to the cookie file
               chmod 600 /opt/bitnami/rabbitmq/.rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
               #copy the mounted configuration to both places
               cp  /opt/bitnami/rabbitmq/conf/* /opt/bitnami/rabbitmq/etc/rabbitmq
               # Apply resources limits
               {{- if .Values.rabbitmq.setUlimitNofiles }}
               ulimit -n "${RABBITMQ_ULIMIT_NOFILES}"
               {{- end }}
               #replace the default password that is generated
               sed -i "/CHANGEME/cdefault_pass=${RABBITMQ_PASSWORD//\\/\\\\}" /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf
               {{- if and .Values.persistence.enabled .Values.forceBoot.enabled }}
               if [ -d "{{ .Values.persistence.path }}/mnesia/${RABBITMQ_NODENAME}" ]; then rabbitmqctl force_boot; fi
               {{- end }}
               {{- if .Values.rabbitmq.communityPlugins }}
               . /opt/scripts/install-plugins.sh
               {{- end }}
               exec rabbitmq-server
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
            {{- if .Values.rabbitmq.communityPlugins }}
            - name: {{ template "rabbitmq.fullname" . }}-plugins
              mountPath: /opt/scripts
            {{- end }}
            - name: config-volume
              mountPath: /opt/bitnami/rabbitmq/conf
            - name: healthchecks
              mountPath: /usr/local/sbin/rabbitmq-api-check
              subPath: rabbitmq-api-check
            - name: healthchecks
              mountPath: /usr/local/sbin/rabbitmq-health-check
              subPath: rabbitmq-health-check
            {{- if .Values.rabbitmq.tls.enabled }}
            - name: {{ template "rabbitmq.fullname" . }}-certs
              mountPath: /opt/bitnami/rabbitmq/certs
            {{- end }}
            - name: data
              mountPath: "{{ .Values.persistence.path }}"
            {{- if .Values.rabbitmq.loadDefinition.enabled }}
            - name: load-definition-volume
              mountPath: /app
              readOnly: true
            {{- end }}
          ports:
            - name: epmd
              containerPort: 4369
            - name: amqp
              containerPort: {{ .Values.service.port }}
            {{- if .Values.rabbitmq.tls.enabled }}
            - name: amqp-ssl
              containerPort: {{ .Values.service.tlsPort }}
            {{- end }}
            - name: dist
              containerPort: {{ .Values.service.distPort }}
            - name: stats
              containerPort: {{ .Values.service.managerPort }}
            - name: ws
              containerPort: {{ .Values.service.wsPort }}
            - name: stomp
              containerPort: {{ .Values.service.stompPort }}
            {{- if .Values.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
            {{- end }}
            {{- if .Values.service.extraContainerPorts }}
            {{- toYaml .Values.service.extraContainerPorts | nindent 12 }}
            {{- end }}
            {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                {{- if .Values.livenessProbe.commandOverride }}
                {{- toYaml .Values.livenessProbe.commandOverride | nindent 16 }}
                {{- else }}
                - sh
                - -c
                - rabbitmq-api-check "http://{{ .Values.rabbitmq.username }}:$RABBITMQ_PASSWORD@localhost:{{ .Values.service.managerPort }}/api/healthchecks/node" '{"status":"ok"}'
                {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                {{- if .Values.readinessProbe.commandOverride }}
                {{- toYaml .Values.readinessProbe.commandOverride | nindent 16 }}
                {{- else }}
                - sh
                - -c
                - rabbitmq-health-check "http://{{ .Values.rabbitmq.username }}:$RABBITMQ_PASSWORD@localhost:{{ .Values.service.managerPort }}/api/healthchecks/node" '{"status":"ok"}'
                {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- if and (gt (.Values.replicas | int) 1) ( eq .Values.rabbitmq.clustering.rebalance true) }}
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - until rabbitmqctl cluster_status >/dev/null; do echo Waiting for
                    cluster readiness...; sleep 5 ; done; rabbitmq-queues rebalance "all"
          {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" .Values.image.debug | quote }}
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "{{ template "rabbitmq.fullname" . }}-headless"
            - name: K8S_ADDRESS_TYPE
              value: {{ .Values.rabbitmq.clustering.address_type }}
            {{- if (eq "hostname" .Values.rabbitmq.clustering.address_type) }}
            - name: RABBITMQ_NODENAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.{{ .Values.rabbitmq.clustering.k8s_domain }}"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.{{ .Values.rabbitmq.clustering.k8s_domain }}"
            {{- else }}
            - name: RABBITMQ_NODENAME
              {{- if .Values.rabbitmq.rabbitmqClusterNodeName }}
              value: {{ .Values.rabbitmq.rabbitmqClusterNodeName | quote }}
              {{- else }}
              value: "rabbit@$(MY_POD_NAME)"
              {{- end }}
            {{- end }}
            {{- if .Values.ldap.enabled }}
            - name: RABBITMQ_LDAP_ENABLE
              value: "yes"
            - name: RABBITMQ_LDAP_TLS
              value: {{ ternary "yes" "no" .Values.ldap.tls.enabled | quote }}
            - name: RABBITMQ_LDAP_SERVER
              value: {{ .Values.ldap.server }}
            - name: RABBITMQ_LDAP_SERVER_PORT
              value: {{ .Values.ldap.port | quote }}
            - name: RABBITMQ_LDAP_USER_DN_PATTERN
              value: {{ .Values.ldap.user_dn_pattern }}
            {{- end }}
            - name: RABBITMQ_LOGS
              value: {{ .Values.rabbitmq.logs | quote }}
            - name: RABBITMQ_ULIMIT_NOFILES
              value: {{ .Values.rabbitmq.ulimitNofiles | quote }}
            {{- if and .Values.rabbitmq.maxAvailableSchedulers }}
            - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
              value: {{ printf "+S %s:%s" (toString .Values.rabbitmq.maxAvailableSchedulers) (toString .Values.rabbitmq.onlineSchedulers) -}}
            {{- end }}
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: {{ template "rabbitmq.secretErlangName" . }}
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "rabbitmq.secretPasswordName" . }}
                  key: rabbitmq-password
            {{- range $key, $value := .Values.rabbitmq.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
        {{- if .Values.securityContext.extra }}
        {{- toYaml .Values.securityContext.extra | nindent 8 }}
        {{- end }}
      {{- end }}
      volumes:
        {{- if .Values.rabbitmq.tls.enabled }}
        - name: {{ template "rabbitmq.fullname" . }}-certs
          secret:
            secretName: {{ if .Values.rabbitmq.tls.existingSecret }}{{ .Values.rabbitmq.tls.existingSecret }}{{- else }}{{ template "rabbitmq.fullname" . }}-certs{{- end }}
            items:
              - key: ca.crt
                path: ca_certificate.pem
              - key: tls.crt
                path: server_certificate.pem
              - key: tls.key
                path: server_key.pem
        {{- end }}
        {{- if .Values.rabbitmq.communityPlugins }}
        - name: {{ template "rabbitmq.fullname" . }}-plugins
          configMap:
            name: {{ template "rabbitmq.fullname" . }}-plugins
        {{- end }}
        - name: config-volume
          configMap:
            name: {{ template "rabbitmq.fullname" . }}-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
              {{- if .Values.rabbitmq.advancedConfiguration}}
              - key: advanced.config
                path: advanced.config
              {{- end }}
              - key: enabled_plugins
                path: enabled_plugins
        - name: healthchecks
          configMap:
            name: {{ template "rabbitmq.fullname" . }}-healthchecks
            items:
              - key: rabbitmq-health-check
                path: rabbitmq-health-check
                mode: 111
              - key: rabbitmq-api-check
                path: rabbitmq-api-check
                mode: 111
        {{- if .Values.rabbitmq.loadDefinition.enabled }}
        - name: load-definition-volume
          secret:
            secretName: {{ tpl .Values.rabbitmq.loadDefinition.secretName . | quote }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
      {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
      {{- else if .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
          {{- with .Values.persistence.existingClaim }}
            claimName: {{ tpl . $ }}
          {{- end }}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app: {{ template "rabbitmq.name" . }}
          release: "{{ .Release.Name }}"
          heritage: "{{ .Release.Service }}"
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{ include "rabbitmq.storageClass" . }}
        {{- if .Values.persistence.selector }}
        selector:
          {{- with .Values.persistence.selector -}}
          {{ toYaml . | nindent 10 }}
          {{- end -}}
        {{- end -}}
  {{- end }}
